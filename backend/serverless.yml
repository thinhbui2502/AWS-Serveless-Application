service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  # X-Ray tracing
  tracing:
    lambda: true
    apiGateway: true
  
  # API Gateway CORS
  httpApi:
    cors: true  
  
  # Environment variables
  environment:
    TODOS_TABLE: Todo-Table-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIdx
    ATTACHMENT_BUCKET: myfiles-todo-s3-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  
  logs:
    # API gateway logs
    restApi:
      true

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
          Resource: 
            - "*"

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:Query'
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

resources:
  Resources:
    # Allocate "TodosTable" DynamoDB with local secondary index (LSI) using the same partion key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: todoId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        KeySchema:
        - AttributeName: userId #Partion key
          KeyType: HASH
        - AttributeName: todoId #Sort key
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
          KeySchema:
            - AttributeName: userId #Same partion key
              KeyType: HASH
            - AttributeName: createdAt #index
              KeyType: RANGE
          Projection:
            ProjectionType: ALL 

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
              
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket